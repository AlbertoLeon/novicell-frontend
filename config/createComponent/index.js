#! /usr/bin/env node

const fs = require('fs');
const args = require('minimist')(process.argv.slice(2));
const chalk = require('chalk');
const path = require('path');
const options = require('../../config');

const log = console.log;

const componentsDir = options.componentsDir.main;

// Templates
function getAtomTemplate(name) {
  return `
    <h3 class="title">{{ greeting }}</h3>
    <div class="{{ class }}">{{ introduction }}</div>
  `;
}

function getAtomJSON(name) {
  return `
    {
      "title": "Component",
      "status": "prototype",
      "context": {
          "greeting": "Hi from ${name} atom",
          "introduction": "${name} component was generated by Novicell-generator"
      }
    }
  `;
}

function getMoleculeTemplate(name) {
  return `
    <div class="molecule">
        <h2>{{ greeting }}</h2>
        <p>{{ introduction }}</p>
    </div>
  `;
}

function getMoleculeJSON(name) {
  return `
    {
      "title": "Molecule",
      "status": "prototype",
      "context": {
        "greeting": "Hi from ${name} molecule",
        "introduction": "${name} component was generated by Novicell-generator"
      }
    }
  `;
}

function getOrganismTemplate(name) {
  return `
    <div class="container">
      <h1>{{ greeting }}</h1>
      <p>{{ introduction }}</p>
      {{#each items}}
        <li>{{this}}</li>
      {{/each}}
    </div>
  `;
}

function getOrganismJSON(name) {
  return `
    {
      "title": "Organism",
      "status": "prototype",
      "context": {
          "greeting": "Hi from ${name} organism",
          "introduction": "${name} component was generated by Novicell-generator",
          "items": [
            "iteration",
            "of",
            "items"
        ]
      }
    }
  `;
}

function getPageTemplate(name) {
  return `
    <div class="page">
        <h1>{{ greeting }}</h1>
        <p>{{ introduction }}</p>
    </div>
  `;
}

function getPageJSON(name) {
  return `
  {
      "title": "Page",
      "status": "prototype",
      "context": {
          "greeting": "Hi from ${name} page",
          "introduction": "${name} component was generated by Novicell-generator"
      }
  }
`
}
// Helpers
function createDir(dir) {
  // Check if the folder exits, if not - create one
  console.log(dir);

  if (!fs.existsSync(dir)) {
    checkAndCreateDestinationPath(dir);
    log(chalk.bgGreen(`Created folder in ${dir}`));
  }
}

function checkAndCreateDestinationPath(fileDestination) {
  const dirPath = fileDestination.split('/');
  dirPath.forEach((element, index) => {
    const joined = dirPath.slice(0, index + 1).join('/');
    const joinedNormalized = path.normalize(joined);
    if (!fs.existsSync(joinedNormalized)) {
      fs.mkdirSync(joinedNormalized);
    }
  });
}

const writeFile = function (filetype, dir, data, name) {
  fs.writeFile(`${dir}/${name}.${filetype}`, data, {
    flag: 'wx'
  }, (err) => {
    if (err) {
      log(chalk.bgRed(`File already exits for ${name}`));
      return;
    }
    log(chalk.bgGreen(`${name}.${filetype} was created`));
  });
}
const dataCss = '/* Insert css here */';

function createAtom(name) {
  const dir = `${componentsDir}/${options.componentsDir.atoms}/${name}`;
  createDir(dir);
  // Create the hbs.file
  writeFile('hbs', dir, getAtomTemplate(name), name);
  writeFile('config.json', dir, getAtomJSON(name), name);
  writeFile('css', dir, dataCss, name);
}

function createMolecule(name) {
  const dir = `${componentsDir}/${options.componentsDir.molecules}/${name}`;
  createDir(dir);

  writeFile('hbs', dir, getMoleculeTemplate(name), name);
  writeFile('config.json', dir, getMoleculeJSON(name), name);
  writeFile('css', dir, dataCss, name);
}

function createOrganism(name) {
  const dir = `${componentsDir}/${options.componentsDir.organisms}/${name}`;
  createDir(dir);

  writeFile('hbs', dir, getOrganismTemplate(name), name);
  writeFile('config.json', dir, getOrganismJSON(name), name);
  writeFile('css', dir, dataCss, name);
}

function createPage(name) {
  const dir = `${componentsDir}/${options.componentsDir.pages}/${name}`;
  createDir(dir);

  writeFile('hbs', dir, getPageTemplate(name), name);
  writeFile('config.json', dir, getPageJSON(name), name);
  writeFile('css', dir, dataCss, name);
}

const type = args.t;
const name = args.n;

if (!type || !name) {
  log(chalk.red('Both type and name must be specificed - look in readme for more information'));
  return;
}
switch (type) {
  case 'a':
    createAtom(name);
    break;
  case 'm':
    createMolecule(name);
    break;
  case 'o':
    createOrganism(name);
    break;
  case 'p':
    createPage(name);
    break;
  default:
    log(chalk.red('Could not recognize the type'));
    break;
}
